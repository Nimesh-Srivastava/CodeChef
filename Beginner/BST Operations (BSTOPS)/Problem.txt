Write a program to perform insertions and deletions on a Binary Search Tree.

Perform Q operations of the form:

i x : Insert x in the BST.
d x : Delete x from the BST.

Each element is assigned a value based on its position when it was inserted into the BST. The position of an element is calculated as follows:

The position of the root node is 1.
If the position of a node is p, the positions of its left and right children are (2∗p) and (2∗p+1), respectively.
Note that the positions of the elements may change after some operations, but their values don't.

For each of the Q queries, output the value that is associated with that element in the BST. It is guaranteed that there will be no duplicates in the BST, and a delete operation on an element shall only be called if it's present in the BST.

INPUT:
The first line contains Q, the number of operations to be performed.
Each of the next Q lines contain either i x or d x, as described above.
OUTPUT:
For each query, print the value associated with this element after it was inserted into, or before it was deleted from the BST, based on the query.

CONSTRAINTS:
1≤Q≤103
−109≤x≤109
1≤ position(x) ≤232−1
It is guaranteed that there will be no duplicates in the BST.
A delete operation on an element will only be called if it's present in the BST.
SAMPLE INPUT:
5
i 1
i 2
i 0
d 2
i 3
SAMPLE OUTPUT:
1
3
2
3
3
EXPLANATION:
On inserting 1,

1

On inserting 2:

1
 \
  2

On inserting 0:

   1
  / \
 0   2

After deleting 2:

  1
 /
0

On inserting 3:

   1
  / \
 0   3